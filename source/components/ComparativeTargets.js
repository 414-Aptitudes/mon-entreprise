/* @flow */
import { setSituationBranch } from 'Actions/actions'
import {
	defineDirectorStatus,
	isAutoentrepreneur
} from 'Actions/companyStatusActions'
import PeriodSwitch from 'Components/PeriodSwitch'
import RuleLink from 'Components/RuleLink'
import withSitePaths from 'Components/utils/withSitePaths'
import React from 'react'
import { connect } from 'react-redux'
import { Link } from 'react-router-dom'
import { config } from 'react-spring'
import { branchAnalyseSelector } from 'Selectors/analyseSelectors'
import {
	r√®gleAvecMontantSelector,
	r√®gleAvecValeurSelector
} from 'Selectors/regleSelectors'
import Animate from 'Ui/animate'
import Montant from 'Ui/Montant'
import { noUserInputSelector } from '../selectors/analyseSelectors'
import './ComparativeTargets.css'
import SchemeCard from './ui/SchemeCard'
import type {
	R√®gle,
	R√®gleAvecMontant,
	R√®gleValeur,
	R√®gleAvecValeur
} from 'Types/RegleTypes'

const connectR√®gles = (situationBranchName: string) =>
	connect(
		state => {
			return ({
				revenuDisponible:
					!noUserInputSelector(state) &&
					r√®gleAvecMontantSelector(state, {
						situationBranchName
					})('revenu disponible'),
				pr√©l√®vements:
					!noUserInputSelector(state) &&
					r√®gleAvecValeurSelector(state, {
						situationBranchName
					})('ratio de pr√©l√®vements')
			}: {
				revenuDisponible: R√®gleAvecMontant,
				pr√©l√®vements: R√®gleAvecValeur
			})
		},
		{
			setSituationBranch,
			isAutoentrepreneur,
			defineDirectorStatus
		}
	)

type ComparativeTargetsProps = {
	plafondAutoEntrepreneurD√©pass√©: ?{ message: string }
}
const ComparativeTargets: React$ComponentType<{}> = connect(state => {
	const analyse = branchAnalyseSelector(state, {
		situationBranchName: 'Auto-entrepreneur'
	})
	return {
		plafondAutoEntrepreneurD√©pass√©:
			analyse.controls &&
			analyse.controls.find(({ test }) =>
				test.includes('base des cotisations > plafond')
			)
	}
})(({ plafondAutoEntrepreneurD√©pass√© }: ComparativeTargetsProps) => (
	<Animate.fromBottom config={config.gentle}>
		<div
			className="ui__ full-width"
			style={{
				display: 'flex',
				flexWrap: 'wrap',
				justifyContent: 'center',
				alignItems: 'stretch'
			}}>
			<AutoEntrepreneur
				branchIndex={0}
				plafondD√©pass√©={
					plafondAutoEntrepreneurD√©pass√© &&
					plafondAutoEntrepreneurD√©pass√©.message
				}
			/>
			<Assimil√©Salari√© branchIndex={2} />
			<Ind√©pendant branchIndex={1} />
		</div>
		<PeriodSwitch />
	</Animate.fromBottom>
))

const Ind√©pendant = connectR√®gles('Ind√©pendant')(
	({
		revenuDisponible,
		pr√©l√®vements,
		branchIndex,
		setSituationBranch,
		defineDirectorStatus,
		isAutoentrepreneur
	}) => (
		<SchemeCard
			title="Ind√©pendant"
			subtitle="La protection √† la carte"
			onAmountClick={() => setSituationBranch(branchIndex)}
			amount={revenuDisponible.montant}
			amountNotice={<Pr√©l√®vementNotice pr√©l√®vements={pr√©l√®vements} />}
			icon="üë©‚Äçüîß"
			amountDesc={<RuleLink {...revenuDisponible} />}
			features={[
				'R√©gime des ind√©pendants',
				'Compl√©mentaire sant√© et pr√©voyance non incluses',
				'Accidents du travail non couverts',
				'Retraite faible (41% du dernier brut)',
				'Indemnit√©s journali√®res plus faibles',
				'Montant minimum de cotisations',
				'Cotisations en d√©calage de deux ans'
			]}
			onSchemeChoice={() => {
				defineDirectorStatus('SELF_EMPLOYED')
				isAutoentrepreneur(false)
			}}
		/>
	)
)

const Assimil√©Salari√© = connectR√®gles('Assimil√© salari√©')(
	({
		revenuDisponible,
		pr√©l√®vements,
		branchIndex,
		setSituationBranch,
		defineDirectorStatus
	}) => (
		<SchemeCard
			title="Assimil√© salari√©"
			onAmountClick={() => setSituationBranch(branchIndex)}
			subtitle="Le r√©gime tout compris"
			amount={revenuDisponible.montant}
			amountNotice={<Pr√©l√®vementNotice pr√©l√®vements={pr√©l√®vements} />}
			featured="Le choix de 58% des dirigeants de soci√©t√©s"
			icon="‚òÇ"
			amountDesc={<RuleLink {...revenuDisponible} />}
			features={[
				'R√©gime g√©n√©ral',
				'Compl√©mentaires sant√© et pr√©voyance incluses',
				'Accidents du travail couverts',
				'Retraite √©lev√©e (62 % du dernier brut)',
				'Pas de cotisations minimales',
				"Seuil pour l'activation des droits (4000‚Ç¨/an)",
				'Fiches de paie mensuelles',
				'Pr√©l√®vement des cotisations √† la source'
			]}
			onSchemeChoice={() => {
				defineDirectorStatus('SALARIED')
				isAutoentrepreneur(false)
			}}
		/>
	)
)

const AutoEntrepreneur = connectR√®gles('Auto-entrepreneur')(
	({
		revenuDisponible,
		pr√©l√®vements,
		setSituationBranch,
		isAutoentrepreneur,
		branchIndex,
		plafondD√©pass√©
	}) => {
		return (
			<SchemeCard
				title="Auto-entrepreneur"
				subtitle="Pour les petites activit√©s"
				onAmountClick={() => setSituationBranch(branchIndex)}
				disabled={plafondD√©pass√©}
				amountDesc={<RuleLink {...revenuDisponible} />}
				icon="üö∂‚Äç‚ôÇÔ∏è"
				amountNotice={<Pr√©l√®vementNotice pr√©l√®vements={pr√©l√®vements} />}
				amount={revenuDisponible.montant}
				features={[
					'R√©gime des ind√©pendants',
					'Pas de d√©duction des charges',
					'Pas de d√©duction fiscale pour la mutuelle (Madelin)',
					"Chiffre d'affaires plafonn√©",
					"Dur√©e de l'ACCRE plus √©lev√©e",
					'Comptabilit√© r√©duite au minimum'
				]}
				onSchemeChoice={() => {
					defineDirectorStatus('SELF_EMPLOYED')
					isAutoentrepreneur(true)
				}}
			/>
		)
	}
)

type Pr√©l√®vementNoticeProps = {
	pr√©l√®vements: ?R√®gleAvecValeur,
	sitePaths: Object
}
const Pr√©l√®vementNotice = withSitePaths(
	({ pr√©l√®vements, sitePaths }: Pr√©l√®vementNoticeProps) =>
		!!pr√©l√®vements && (
			<>
				soit{' '}
				<Montant
					style={{ fontFamily: 'inherit' }}
					type="percent"
					numFractionDigit={0}>
					{pr√©l√®vements.valeur}
				</Montant>{' '}
				de{' '}
				<Link to={sitePaths.documentation.index + '/' + pr√©l√®vements.lien}>
					pr√©l√®vements
				</Link>
			</>
		)
)
export default ComparativeTargets
