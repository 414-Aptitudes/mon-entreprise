/* @flow */
import RuleLink from 'Components/RuleLink'
import React from 'react'
import { connect } from 'react-redux'
import { Link } from 'react-router-dom'
import { config } from 'react-spring'
import {
	r√®gleAvecMontantSelector,
	r√®gleAvecValeurSelector
} from 'Selectors/regleSelectors'
import Animate from 'Ui/animate'
import Montant from 'Ui/Montant'
import './ComparativeTargets.css'
import SchemeCard from './ui/SchemeCard'
// export default compose(
// 	connect(
// 		state => ({
// 			target: findRuleByDottedName(
// 				flatRulesSelector(state),
// 				state.simulationConfig?.objectifs[0]
// 			),
// 			simulationBranches: state.simulationConfig?.branches,
// 			analyses: analysisWithDefaultsSelector(state)
// 		}),
// 		dispatch => ({
// 			setSituationBranch: id => dispatch({ type: 'SET_SITUATION_BRANCH', id })
// 		})
// 	),
// 	withColours,
// 	withSitePaths
// )(
// 	class ComparativeTargets extends React.Component {
// 		render() {
// 			let {
// 				colours,
// 				analyses,
// 				target,
// 				setSituationBranch,
// 				sitePaths,
// 				simulationBranches
// 			} = this.props
// 			if (!simulationBranches) {
// 				return null
// 			}
// 			// We retrieve the values necessary to compute the global % of taxes
// 			// This is not elegant
// 			let getRatioPr√©l√®vements = analysis =>
// 				analysis.targets.find(t => t.dottedName === 'ratio de pr√©l√®vements')
// 			return (
// 				<>
// 						{analyses.map((analysis, i) => {
// 							if (!analysis.targets) return null
// 							let { nodeValue, dottedName } = analysis.targets[0],
// 								name = simulationBranches[i].nom

// 							let microNotApplicable =
// 								name === 'Micro-entreprise' &&
// 								analysis.controls?.find(({ test }) =>
// 									test.includes('base des cotisations > plafond')
// 								)

// 							let ratioPr√©l√®vements = getRatioPr√©l√®vements(analysis)

// 							return (
// 								<li
// 									style={{
// 										color: colours.textColour,
// 										background: `linear-gradient(
// 											60deg,
// 											${colours.darkColour} 0%,
// 											${colours.colour} 100%
// 										)`
// 									}}
// 									className={microNotApplicable ? 'microNotApplicable' : ''}
// 									key={name}>
// 									<span className="title">{name}</span>
// 									{microNotApplicable ? (
// 										<p id="microNotApplicable">{microNotApplicable.message}</p>
// 									) : (
// 										<>
// 											<span className="figure">
// 												<span className="value">
// 													<AnimatedTargetValue value={nodeValue} />
// 												</span>{' '}
// 												<Link
// 													title="Quel est calcul ?"
// 													style={{ color: this.props.colours.colour }}
// 													to={
// 														sitePaths.documentation.index +
// 														'/' +
// 														encodeRuleName(dottedName)
// 													}
// 													onClick={() => setSituationBranch(i)}
// 													className="explanation">
// 													{emoji('üìñ')}
// 												</Link>
// 											</span>
// 											<small>
// 												Soit{' '}
// 												{Math.round((1 - ratioPr√©l√®vements.nodeValue) * 100)} %
// 												de{' '}
// 												<Link
// 													style={{ color: 'white' }}
// 													to={
// 														sitePaths.documentation.index +
// 														'/' +
// 														encodeRuleName(ratioPr√©l√®vements.dottedName)
// 													}>
// 													pr√©l√®vements
// 												</Link>
// 											</small>
// 										</>
// 									)}
// 								</li>
// 							)
// 						})}
// 					</ul>
// 				</div>
// 			)
// 		}
// 	}
// )
const connectR√®gles = (situationBranchName: string) =>
	connect(state => ({
		revenuDisponible: r√®gleAvecMontantSelector(state, {
			situationBranchName
		})('revenu disponible'),
		pr√©l√®vements: r√®gleAvecValeurSelector(state, {
			situationBranchName
		})('ratio de pr√©l√®vements')
	}))

const ComparativeTargets = () => (
	<Animate.fromBottom config={config.gentle}>
		<div
			className="ui__ full-width"
			style={{
				display: 'flex',
				flexWrap: 'wrap',
				justifyContent: 'center',
				alignItems: 'stretch'
			}}>
			<Ind√©pendant />
			<Assimil√©Salari√© />
			<MicroEntreprise />
		</div>
	</Animate.fromBottom>
)

const Ind√©pendant = connectR√®gles('Ind√©pendant')(
	({ revenuDisponible, pr√©l√®vements }) => (
		<SchemeCard
			title="Ind√©pendants"
			subtitle="La protection √† la carte"
			amount={revenuDisponible.montant}
			amountNotice={<Pr√©l√®vementNotice pr√©l√®vements={pr√©l√®vements} />}
			icon="üë©‚Äçüîß"
			amountDesc={<RuleLink {...revenuDisponible} />}
			features={[
				'R√©gime des ind√©pendants',
				'Compl√©mentaire sant√© et pr√©voyance facultatives',
				'Accidents du travail non couverts',
				'Retraite faible (41% du brut en moyenne)',
				'Indemnit√©s journali√®res plus faibles',
				'Montant minimum de cotisations',
				'Comptabilit√© plus exigeante',
				'Calcul des cotisations d√©cal√©'
			]}
		/>
	)
)

const Assimil√©Salari√© = connectR√®gles('Assimil√© salari√©')(
	({ revenuDisponible, pr√©l√®vements }) => (
		<SchemeCard
			title="Assimil√© salari√©"
			subtitle="Le r√©gime tout compris"
			amount={revenuDisponible.montant}
			amountNotice={<Pr√©l√®vementNotice pr√©l√®vements={pr√©l√®vements} />}
			featured="Le choix de 58% des entrepreneurs (hors EI)"
			icon="‚òÇ"
			amountDesc={<RuleLink {...revenuDisponible} />}
			features={[
				'R√©gime g√©n√©ral',
				'Compl√©mentaire sant√© et pr√©voyance incluse',
				'Accidents du travail couverts',
				'Retraite √©lev√©e (62 % du brut)',
				'Pas de minimum de paie',
				"Seuil pour l'activation des droits (4000‚Ç¨/an)",
				'Fiche de paie mensuels',
				'Pr√©l√®vement imm√©diat'
			]}
		/>
	)
)

const MicroEntreprise = connectR√®gles('Micro-entreprise')(
	({ revenuDisponible, pr√©l√®vements }) => (
		<SchemeCard
			title="Micro-entreprise"
			subtitle="Pour les petites activit√©s"
			amountDesc={<RuleLink {...revenuDisponible} />}
			icon="üö∂‚Äç‚ôÇÔ∏è"
			amountNotice={<Pr√©l√®vementNotice pr√©l√®vements={pr√©l√®vements} />}
			amount={revenuDisponible.montant}
			features={[
				'R√©gime des ind√©pendants',
				'Pas de d√©duction des charges',
				'Pas de d√©duction fiscale pour la mutuelle (Madelin)',
				"Seuil de chiffre d'affaire",
				"Dur√©e de l'ACCRE plus √©lev√©e",
				'Pas de CFE la premi√®re ann√©e',
				'Comptabilit√© simplifi√©e'
			]}
		/>
	)
)

const Pr√©l√®vementNotice = ({ pr√©l√®vements }) => (
	<>
		soit{' '}
		<Montant
			style={{ fontFamily: 'inherit' }}
			type="percent"
			numFractionDigit={0}>
			{pr√©l√®vements.valeur}
		</Montant>{' '}
		de <Link to={pr√©l√®vements.lien}>pr√©l√®vements</Link>
	</>
)

export default ComparativeTargets
